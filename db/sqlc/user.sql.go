// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT email_address, prefix, token, generated_at, expired_at
FROM "users"
WHERE "prefix" = $1
`

func (q *Queries) GetUser(ctx context.Context, prefix string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, prefix)
	var i User
	err := row.Scan(
		&i.EmailAddress,
		&i.Prefix,
		&i.Token,
		&i.GeneratedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "users" (
    "email_address",
    "prefix",
    "token",
    "generated_at",
    "expired_at"
  )
VALUES ($1, $2, $3, $4, $5)
RETURNING email_address, prefix, token, generated_at, expired_at
`

type InsertUserParams struct {
	EmailAddress string `json:"email_address"`
	Prefix       string `json:"prefix"`
	Token        string `json:"token"`
	GeneratedAt  string `json:"generated_at"`
	ExpiredAt    string `json:"expired_at"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.EmailAddress,
		arg.Prefix,
		arg.Token,
		arg.GeneratedAt,
		arg.ExpiredAt,
	)
	var i User
	err := row.Scan(
		&i.EmailAddress,
		&i.Prefix,
		&i.Token,
		&i.GeneratedAt,
		&i.ExpiredAt,
	)
	return i, err
}

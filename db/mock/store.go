// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/banachtech/spotted-zebra/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/banachtech/spotted-zebra/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetAllCorr mocks base method.
func (m *MockStore) GetAllCorr(arg0 context.Context) ([]db.Corrpair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCorr", arg0)
	ret0, _ := ret[0].([]db.Corrpair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCorr indicates an expected call of GetAllCorr.
func (mr *MockStoreMockRecorder) GetAllCorr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCorr", reflect.TypeOf((*MockStore)(nil).GetAllCorr), arg0)
}

// GetAllDate mocks base method.
func (m *MockStore) GetAllDate(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDate", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDate indicates an expected call of GetAllDate.
func (mr *MockStoreMockRecorder) GetAllDate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDate", reflect.TypeOf((*MockStore)(nil).GetAllDate), arg0)
}

// GetAllParam mocks base method.
func (m *MockStore) GetAllParam(arg0 context.Context) ([]db.Modelparameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllParam", arg0)
	ret0, _ := ret[0].([]db.Modelparameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllParam indicates an expected call of GetAllParam.
func (mr *MockStoreMockRecorder) GetAllParam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllParam", reflect.TypeOf((*MockStore)(nil).GetAllParam), arg0)
}

// GetAllStats mocks base method.
func (m *MockStore) GetAllStats(arg0 context.Context) ([]db.Statistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStats", arg0)
	ret0, _ := ret[0].([]db.Statistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStats indicates an expected call of GetAllStats.
func (mr *MockStoreMockRecorder) GetAllStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStats", reflect.TypeOf((*MockStore)(nil).GetAllStats), arg0)
}

// GetBacktestValues mocks base method.
func (m *MockStore) GetBacktestValues(arg0 context.Context) (db.GetBacktestValuesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBacktestValues", arg0)
	ret0, _ := ret[0].(db.GetBacktestValuesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBacktestValues indicates an expected call of GetBacktestValues.
func (mr *MockStoreMockRecorder) GetBacktestValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBacktestValues", reflect.TypeOf((*MockStore)(nil).GetBacktestValues), arg0)
}

// GetCorr mocks base method.
func (m *MockStore) GetCorr(arg0 context.Context, arg1 string) ([]db.Corrpair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorr", arg0, arg1)
	ret0, _ := ret[0].([]db.Corrpair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCorr indicates an expected call of GetCorr.
func (mr *MockStoreMockRecorder) GetCorr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorr", reflect.TypeOf((*MockStore)(nil).GetCorr), arg0, arg1)
}

// GetLatestCorrDate mocks base method.
func (m *MockStore) GetLatestCorrDate(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestCorrDate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestCorrDate indicates an expected call of GetLatestCorrDate.
func (mr *MockStoreMockRecorder) GetLatestCorrDate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestCorrDate", reflect.TypeOf((*MockStore)(nil).GetLatestCorrDate), arg0)
}

// GetLatestParamDate mocks base method.
func (m *MockStore) GetLatestParamDate(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestParamDate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestParamDate indicates an expected call of GetLatestParamDate.
func (mr *MockStoreMockRecorder) GetLatestParamDate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestParamDate", reflect.TypeOf((*MockStore)(nil).GetLatestParamDate), arg0)
}

// GetLatestPrice mocks base method.
func (m *MockStore) GetLatestPrice(arg0 context.Context) ([]db.GetLatestPriceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPrice", arg0)
	ret0, _ := ret[0].([]db.GetLatestPriceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPrice indicates an expected call of GetLatestPrice.
func (mr *MockStoreMockRecorder) GetLatestPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPrice", reflect.TypeOf((*MockStore)(nil).GetLatestPrice), arg0)
}

// GetLatestStatsDate mocks base method.
func (m *MockStore) GetLatestStatsDate(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestStatsDate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestStatsDate indicates an expected call of GetLatestStatsDate.
func (mr *MockStoreMockRecorder) GetLatestStatsDate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestStatsDate", reflect.TypeOf((*MockStore)(nil).GetLatestStatsDate), arg0)
}

// GetParam mocks base method.
func (m *MockStore) GetParam(arg0 context.Context, arg1 string) ([]db.Modelparameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParam", arg0, arg1)
	ret0, _ := ret[0].([]db.Modelparameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParam indicates an expected call of GetParam.
func (mr *MockStoreMockRecorder) GetParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParam", reflect.TypeOf((*MockStore)(nil).GetParam), arg0, arg1)
}

// GetStats mocks base method.
func (m *MockStore) GetStats(arg0 context.Context, arg1 string) ([]db.Statistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0, arg1)
	ret0, _ := ret[0].([]db.Statistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStoreMockRecorder) GetStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStore)(nil).GetStats), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetValues mocks base method.
func (m *MockStore) GetValues(arg0 context.Context) (db.GetValuesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValues", arg0)
	ret0, _ := ret[0].(db.GetValuesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValues indicates an expected call of GetValues.
func (mr *MockStoreMockRecorder) GetValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MockStore)(nil).GetValues), arg0)
}

// InsertCorr mocks base method.
func (m *MockStore) InsertCorr(arg0 context.Context, arg1 db.InsertCorrParams) (db.Corrpair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCorr", arg0, arg1)
	ret0, _ := ret[0].(db.Corrpair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCorr indicates an expected call of InsertCorr.
func (mr *MockStoreMockRecorder) InsertCorr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCorr", reflect.TypeOf((*MockStore)(nil).InsertCorr), arg0, arg1)
}

// InsertParam mocks base method.
func (m *MockStore) InsertParam(arg0 context.Context, arg1 db.InsertParamParams) (db.Modelparameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertParam", arg0, arg1)
	ret0, _ := ret[0].(db.Modelparameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertParam indicates an expected call of InsertParam.
func (mr *MockStoreMockRecorder) InsertParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertParam", reflect.TypeOf((*MockStore)(nil).InsertParam), arg0, arg1)
}

// InsertStat mocks base method.
func (m *MockStore) InsertStat(arg0 context.Context, arg1 db.InsertStatParams) (db.Statistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStat", arg0, arg1)
	ret0, _ := ret[0].(db.Statistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertStat indicates an expected call of InsertStat.
func (mr *MockStoreMockRecorder) InsertStat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStat", reflect.TypeOf((*MockStore)(nil).InsertStat), arg0, arg1)
}

// InsertUser mocks base method.
func (m *MockStore) InsertUser(arg0 context.Context, arg1 db.InsertUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockStoreMockRecorder) InsertUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockStore)(nil).InsertUser), arg0, arg1)
}
